{{- $v := .Values }}
{{- $cm := index $v.charts "cert-manager" }}
{{- $dns := $v | get "dns" dict }}
{{- $p := $dns | get "provider" dict }}
{{- $certTpl := readFile "../../helmfile.d/snippets/certificate.gotmpl" }}
{{- $vars := tpl (readFile "../../helmfile.d/snippets/domains.gotmpl") $v | fromYaml }}
{{- $letsEncryptStage := printf "letsencrypt-%s" $cm.stage }}

resources:
{{- if {{ not $v.otomi.hasExternalDNS }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: "dns-secret"
    data:
      {{- if hasKey $p "google" }}
      secret: "{{ $p.google.serviceAccountKey | b64enc }}"
      {{- else if hasKey $p "azure" }}
      # TODO: is aadClientSecret  same as azureClientSecret ?
      secret: "{{ $p.azure.aadClientSecret | b64enc }}"
      {{- else if hasKey $p "aws" }}
      secret: "{{ $p.aws.secretAccessKey | b64enc }}"
      {{- end }}
{{- end }}

{{- if not $v.otomi.hasCustomCA }}
  - apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: {{ $$letsEncryptStage }}
    spec:
      acme:
        server: https://acme{{ (eq $cm.stage "staging") | ternary "-staging" "" }}-v02.api.letsencrypt.org/directory
        email: {{ $cm.email }}
        privateKeySecretRef:
          name: {{ $letsEncryptStage }}
        solvers:
          - selector: {}
            dns01:
              {{- if hasKey $p "aws" }}
              route53:
                {{- if and (hasKey $p.aws "accessKeyID") (hasKey $p.aws "secretAccessKey") }}
                accessKeyID: {{ $p.aws.accessKeyID }}
                secretAccessKeySecretRef:
                  key: secret
                  name: "dns-secret"
                {{- end }}
                region: {{ $p.aws.region }}
                {{- if hasKey $p.aws "role" }}
                role: {{ $p.aws.role }}
                {{- end }}
              {{- else if hasKey $p "azure" }}
              azureDNS:
                clientID: {{ $p.azure.aadClientId }}
                clientSecretSecretRef:
                  key: secret
                  name: "dns-secret"
                {{- if hasKey $p.azure "hostedZoneName" }}
                hostedZoneName: {{ $p.azure.hostedZoneName }}
                {{- end }}
                resourceGroupName: {{ $p.azure.resourceGroup }}
                subscriptionID: {{ $p.azure.subscriptionId }}
                tenantID: {{ $p.azure.tenantId }}
              {{- else if hasKey $p "google" }}
              cloudDNS:
                project: {{ $p.google.project }}
                serviceAccountSecretRef:
                  key: secret
                  name: "dns-secret"
              {{- end }}
{{- else }}
{{- $caKeyPair := "customCA" }}
  - apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: customCA
    spec:
      ca:
        secretName: {{ $caKeyPair }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: {{ $caKeyPair }}
    data:
      tls.crt: {{ $v.cluster.customRootCA | b64enc }}
      tls.key: {{ $v.cluster.customRootCAKey | b64enc}}
{{- end }}

# generate all da certs
{{- range $domInfo := $vars.domains }}
  {{- if not $domInfo.hasCert }}
    {{- $certName := ($domInfo.domain | replace "." "-") }}
  - {{ tpl $certTpl (merge (dict "domain" $domInfo.domain "name" $certName) $v) | nindent 4 }}
  {{- end }}
{{- end }}
